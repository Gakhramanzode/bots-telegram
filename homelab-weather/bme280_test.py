import threading
import logging
from smbus2 import SMBus
from bme280 import BME280
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from prometheus_client import Gauge, Counter, CollectorRegistry, push_to_gateway
import subprocess
import sys
import time
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telegram
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∏ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Pushgateway
registry = CollectorRegistry()
TEMPERATURE_GAUGE = Gauge("meteo_temperature", "Current temperature in Celsius", registry=registry)
PRESSURE_GAUGE = Gauge("meteo_pressure", "Current atmospheric pressure in hPa", registry=registry)
HUMIDITY_GAUGE = Gauge("meteo_humidity", "Current humidity percentage", registry=registry)
BOT_START_COUNTER = Counter("bot_start_requests", "Count of /start command requests", registry=registry)
BOT_WEATHER_COUNTER = Counter("bot_weather_requests", "Count of /weather command requests", registry=registry)

# URL –¥–ª—è Pushgateway, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
PUSHGATEWAY_URL = os.getenv("PUSHGATEWAY_URL")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ –Ω–∞ Pushgateway
def push_metrics(job_name="meteo_server"):
    try:
        push_to_gateway(PUSHGATEWAY_URL, job=job_name, registry=registry)
        logging.info("–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ Pushgateway")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Ç—Ä–∏–∫ –Ω–∞ Pushgateway: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∞–¥—Ä–µ—Å—É 0x76
def check_device_address(address=0x76):
    try:
        result = subprocess.run(["i2cdetect", "-y", "1"], capture_output=True, text=True)
        if f"{address:02x}" not in result.stdout:
            logging.error(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∞–¥—Ä–µ—Å—É 0x{address:02x} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
            return False
        logging.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∞–¥—Ä–µ—Å—É 0x{address:02x} –Ω–∞–π–¥–µ–Ω–æ.")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞
def initialize_sensor():
    try:
        bus = SMBus(1)
        bme280 = BME280(i2c_dev=bus)
        logging.info("–î–∞—Ç—á–∏–∫ BME280 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return bme280
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞: {e}")
        return None

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
def get_weather_data(bme280):
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        time.sleep(1)
        bme280.update_sensor()
        time.sleep(0.5)
        bme280.update_sensor()

        temperature = bme280.get_temperature()
        pressure = bme280.get_pressure()
        humidity = bme280.get_humidity()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ Pushgateway
        TEMPERATURE_GAUGE.set(temperature)
        PRESSURE_GAUGE.set(pressure)
        HUMIDITY_GAUGE.set(humidity)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        weather_info = (
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.2f} ¬∞C\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure:.2f} hPa\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity:.2f} %"
        )
        return weather_info
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

# –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
def background_metric_push(bme280, interval=600):
    while True:
        get_weather_data(bme280)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        push_metrics()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Pushgateway
        time.sleep(interval)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–≥–æ–¥–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, 'Cloudy with a Chance'. üå¶Ô∏è\n"
        "–Ø —Ç—É—Ç, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã—Ö –¥–µ–ª ‚Äî –±—É–¥—å —Ç–æ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω—ã–π –ª–∏–≤–µ–Ω—å!\n"
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –∑–∞ –æ–∫–Ω–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –í–≤–µ–¥–∏ /weather, –∏ —è –≤—ã–¥–∞–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –¥–∞–≤–ª–µ–Ω–∏–∏ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏. üå°Ô∏èüíßüìâ\n"
        "–ì–æ—Ç–æ–≤ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –∏ –Ω–æ—á–∏! –ù—É, –ø–æ—á—Ç–∏. üòÑ"
    )

    await update.message.reply_text(welcome_message)
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    BOT_START_COUNTER.inc()  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /start

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞
    weather_info = get_weather_data(bme280)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(weather_info)
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /weather –ø–æ–ª—É—á–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    BOT_WEATHER_COUNTER.inc()  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /weather

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == "__main__":
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if not check_device_address():
        sys.exit(1)

    # –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞
    bme280 = initialize_sensor()
    if bme280 is None:
        sys.exit(1)

    # –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logging.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        sys.exit(1)

    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
    metric_thread = threading.Thread(target=background_metric_push, args=(bme280, 60), daemon=True)
    metric_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    application.run_polling()
